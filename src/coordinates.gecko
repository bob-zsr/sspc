main:
    [ba+0015A0] := w gr0        # Store off GR0 - GR4 so we don't conflict with other active codes.
    [ba+0015A4] := w gr1
    [ba+0015A8] := w gr2
    [ba+0015AC] := w gr3
    [ba+0015B0] := w gr4
    gr0 := 80001504
    [ba+001500] := b02          # To handle floats, set mode to 2

    ### X
    [gr0] := [ba+B765EC]**4     # X coordinate source ptr
    gr1 := 80CAD084             # Nunchuk text ptr
    gr2 := 80CACE04             # Nunchuk shadow ptr
    [ba+001590] := w80CAC530    # Nunchuk luminosity ptr
    [ba+001594] := w80CAD0AB    # Text enable ptr
    [ba+001598] := w80CACE2B    # Shadow enable ptr
    [ba+00159C] := b4**2        # [8000159C-D] := Enable byte
    gosub 0 convert

    ### Y
    [gr0] := [ba+B765F0]**4     # Y coordinate source ptr
    gr1 := 80C90A04             # C button text ptr
    gr2 := 80C90784             # C button shadow ptr
    [ba+001590] := w80C909E5    # C button luminosity ptr
    [ba+001594] := w80C909E7    # Text enable ptr
    [ba+001598] := w80C90767    # Shadow enable ptr
    [ba+00159C] := b1**2        # [8000159C-D] := enable byte
    gosub 0 convert

    ### Z
    [gr0] := [ba+B765F4]**4     # Z coordinate source ptr
    gr1 := 80CA9018             # Z button text ptr
    gr2 := 80CA8D98             # Z button shadow ptr
    # [ba+001590] := w????????  # Z button luminosity ptr?
    [ba+001594] := w80CA8FF9    # Text enable ptr
    [ba+001598] := w80CA8D79    # Shadow enable ptr
    [ba+00159C] := bFF          # Text enable byte
    [ba+00159D] := b40          # Shadow enable byte
    gosub 0 convert

    ### Angle
    [ba+001500] := b01          # To handle halfword, set mode to 1
    [gr0] := [ba+B765E6]**2     # Angle source ptr
    gr1 := 80CE114C             # 2 button text ptr
    gr2 := 80CE0ECC             # 2 button shadow ptr
                                # 2 button luminosity ptr?
                                # Text enable ptr?
                                # Shadow enable ptr?
                                # Enable bytes?
    gosub 0 convert
goto end

convert:
    48001002 00000000           # po := [gr2], shadow ptr
    DE000000 80008180           # assert po valid
    48001001 00000000           # po := [gr1], text ptr
    DE000000 80008180           # assert po valid
    gr3 := 80001508
    
    {convert.asm}               # converts the stored values to a UTF16 string at 0x80001520, and a byte at 80001508 indicating the number of halfwords printed
    
    gr4 := 80001520
    48001001 00000000           # po := [gr1], text ptr
    [po] := [gr4]**20           # Copy 0x20 bytes from ba+0x1520 to [po]
    [gr1+C3] := [gr3]           # Copy 1 byte (return value: indicates # of halfwords printed) from [gr3] to [gr1+0xC3], to tell the label how long it needs to be

    48001002 00000000           # po := [gr2], shadow ptr
    [po] := [gr4]**20           # Copy 0x20 bytes from ba+0x1520 to [po]
    [gr2+C3] := [gr3]           # Copy 1 byte (return value: indicates # of halfwords printed) from [gr3] to [gr2+0xC3], to tell the label how long it needs to be

    48000000 80001590           # po := w[80001590]
    10000000 000000FF           # [po] := bFF
    gr3 := 8000159C
    gr1 := w[80001594]
    [gr1] := [gr3]              # Copy 1 byte from [gr3] to [gr1]
    gr1 := w[80001598]
    [gr1] := [gr3+1]            # Copy 1 byte from [gr3+1] to [gr1]
    
    E2000002 00000000
return 0

end:
gr0 := w[800015A0]
gr1 := w[800015A4]
gr2 := w[800015A8]
gr3 := w[800015AC]
gr4 := w[800015B0]
E0000000 80008000               # End Code.